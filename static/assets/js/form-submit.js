document.addEventListener("DOMContentLoaded", function () {
  const form = document.querySelector("form");
  const searchButton = document.querySelector("button[type='submit']");
  const inputField = document.querySelector("input[name='cve_code']");
  const errorContainer = document.querySelector("#error-container");
  const pdfPreviewContainer = document.querySelector("#pdf-preview-container");

  form.addEventListener("submit", function (event) {
    event.preventDefault();

    const formData = new FormData(form); // Get form data

    // Add spinner to search button
    toggleLoading(true);

    // Clear error container
    errorContainer.innerHTML = "";

    pdfPreviewContainer.style.display = "none";

    // Create fetch request
    fetch("", {
      method: "POST",
      body: formData,
    })
      .then((response) => {
        if (!response.ok) {
          // Display errors below the form
          response.json().then((data) => {
            const errors = data.errors;
            displayErrors(errors);
          });
          throw new Error("Response is not OK:", response.statusText);
        }

        // Remove spinner when PDF reply arrives
        toggleLoading(false);

        // Show preview when PDF response arrives
        response.blob().then((blob) => {
          displayPDF(blob);
        });

        // Open references in new tabs
        const referencesToOpenHeader =
          response.headers.get("References-To-Open");
        const referencesToOpen = JSON.parse(referencesToOpenHeader);
        openReferencesInNewTabs(referencesToOpen);
      })
      .catch((error) => {
        console.error("Error:", error);
        // Remove spinner when error occurs
        toggleLoading(false);
      });
  });

  function toggleLoading(isLoading) {
    searchButton.innerHTML = isLoading
      ? `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Searching...`
      : "Search";
    searchButton.disabled = isLoading;
    inputField.disabled = isLoading;
  }

  function displayErrors(errors) {
    for (const key in errors) {
      if (errors.hasOwnProperty(key)) {
        const errorMessages = errors[key].join("<br>");
        errorContainer.innerHTML += `<div class="text-danger small fst-italic">${errorMessages}</div>`;
      }
    }
  }

  function displayPDF(blob) {
    const url = window.URL.createObjectURL(blob);
    const iframe = document.getElementById("pdf-iframe");
    iframe.src = url;
    pdfPreviewContainer.style.display = "block";
  }

  function openReferencesInNewTabs(references) {
    references.forEach((reference) => {
      window.open(reference, "_blank"); // Open each reference in a new tab
    });
  }
});
