import re
import requests
from datetime import datetime
from bs4 import BeautifulSoup
from django import forms


class CVECodeForm(forms.Form):
    cve_code = forms.CharField(
        required=True,
        label="Enter CVE Code",
        widget=forms.TextInput(
            attrs={"class": "form-control", "placeholder": "CVE-XXXX-XXXX"}
        )
    )

    def clean_cve_code(self):
        cve_code = self.cleaned_data.get("cve_code").strip().upper()

        # Regular expression pattern for a valid CVE code
        regex_pattern = r"^CVE-\d{4}-\d+$"
        regex = re.compile(regex_pattern)

        # Check if the CVE code matches the regex pattern
        if not regex.match(cve_code):
            raise forms.ValidationError("Invalid CVE Code format.")

        current_year = datetime.now().year
        cve_year = int(cve_code[4:8])
        # Check if the CVE year is between 1999 and the current year
        if cve_year < 1999 or cve_year > current_year:
            raise forms.ValidationError("CVE Year must be between 1999 and current year.")

        cve_code_endswith = cve_code.split("-")[-1]
        # Check if the CVE id ends with less than 4 digits
        if len(cve_code_endswith) < 4:
            raise forms.ValidationError("CVE cannot endswith less than 4 digits.")
        # Check if the CVE id ends with all zeros after the "-"
        elif cve_code_endswith.strip("0") == "":
            raise forms.ValidationError("CVE cannot endswith all zeros. Please ensure the CVE starts from '0001'.")

        cve_control_url = f"https://cveawg.mitre.org/api/cve-id/{cve_code}"
        cve_control_response = requests.get(cve_control_url)

        if cve_control_response.status_code != 200:
            raise forms.ValidationError("Failed to retrieve CVE details from CVE server.")

        cve_data = cve_control_response.json()

        # Check the CVE state
        cve_state = cve_data.get("state", "").upper()
        if cve_state == "RESERVED":
            raise forms.ValidationError("CVE State is RESERVED.")
        elif cve_state == "REJECTED":
            raise forms.ValidationError("CVE State is REJECTED.")
        elif cve_state != "PUBLISHED":
            raise forms.ValidationError("Invalid CVE State.")

        # Retrieve more details if the CVE is published
        nist_url = f"https://nvd.nist.gov/vuln/detail/{cve_code}"
        nist_response = requests.get(nist_url)

        if nist_response.status_code != 200:
            raise forms.ValidationError("Failed to retrieve CVE details from NIST server.")

        # Parse HTML content with BeautifulSoup
        soup = BeautifulSoup(nist_response.content, "html.parser")
        analysis_status = soup.find("span", {"data-testid": "vuln-warning-status-name"})

        # Check if the response indicates that the CVE is still awaiting analysis
        if analysis_status and analysis_status.text.strip().lower() == "awaiting analysis":
            raise forms.ValidationError("CVE is still under analysis.")

        return cve_code
